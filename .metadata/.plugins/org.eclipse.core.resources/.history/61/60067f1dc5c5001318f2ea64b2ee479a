package leetCode;

import java.util.ArrayList;

public class ConstructBinaryTree {
	
	public static void main(String[] args){
		int[] preorder = new int[] 
		ArrayList<Integer> preorder = new ArrayList 
	}
	
	public TreeNode construct(ArrayList<Integer> preorder,
			ArrayList<Integer> inorder) {
		// Get head in preorder;
		if (preorder.size()==1 && inorder.size()==1){
			return new TreeNode(preorder.get(0));
		}
		int headVal = preorder.get(0);
		// Split inorder
		ArrayList<Integer> leftIn = new ArrayList<Integer>();
		ArrayList<Integer> rightIn = new ArrayList<Integer>();
		for (int i = 0; i < inorder.size(); i++) {
			if (inorder.get(i) == headVal) {
				leftIn = (ArrayList<Integer>) inorder.subList(0, i);
				rightIn = (ArrayList<Integer>) inorder.subList(i + 1,
						inorder.size());
			}
		}
		int leftSize = leftIn.size();
		int rightSize = rightIn.size();
		ArrayList<Integer> leftPre = (ArrayList<Integer>) preorder.subList(1,
				1 + leftSize);
		ArrayList<Integer> rightPre = (ArrayList<Integer>) preorder.subList(
				1 + leftSize, 1 + leftSize + rightSize);
		
		TreeNode head = new TreeNode(headVal);
		head.left = construct(leftPre,leftIn);
		head.right = construct(rightPre,rightIn);
		return head;
	}

}
