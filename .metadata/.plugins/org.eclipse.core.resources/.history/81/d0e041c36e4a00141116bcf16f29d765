package leetCode;
import java.util.*;
public class PalindromePartition {
    public List<List<String>> partition(String s) {
        List<String> oneResult = new ArrayList<String>();
        List<List<String>> solution = new ArrayList<List<String>>();
        DFS(s,0,oneResult,solution);
        return solution;
        
    }
    public void DFS(String s, int start, List<String> oneResult, List<List<String>> solution){
        if (start==s.length()){
            
        }
        for (int i=start;i<s.length();i++){
            if (isPalindrome(s,start,i)){
                oneResult.add(s.substring(start,))
            }
        }
        
    }
    
    public boolean isPalindrome(String s, int start, int end){
        while(start<end){
            if (s.charAt(start)!=s.charAt(end)){
                return false;
            }
            start++;
            end--;
            
        }
        return true;
    }
}
